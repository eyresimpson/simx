# 环境周边配置
[env]
# 自动检查环境有效性，例如simx会检查本地的python命令是否有效
# 仅在启动时检查，可能耗费一定时间
auto-check-env = true

# python 配置
[python]
# 如果为false，系统将忽略所有的python脚本
enable = true
# 如果在系统环境变量中，可以直接填写
path = "python"
# 是否自动安装依赖（bate）
auto-dependency = false
# 安全模式，禁止操作非工作目录下的文件，禁止对操作系统进行修改
safe-mode = true

# shell 配置
[shell]
# 如果为false，系统将忽略所有sh的脚本
enable = true
# 名称不能修改
name = "shell"
# 是否在macos下运行
enable-macos = false
# 是否在linux环境下运行
enable-linux = true
# 允许以root权限运行（不安全）
# 允许脚本尝试请求root权限
root = false
# 安全模式，禁止操作非工作目录下的文件，禁止对操作系统进行修改
safe-mode = true

# powershell 配置
[powershell]
# 如果为false，系统将忽略所有ps1的脚本
enable = true
# 名称不能修改
name = "powershell"
# 允许以管理员权限运行（不安全）
# 会尝试请求root权限
admin = false
# 自动解决本机禁止运行ps1脚本的问题
# 在程序启动检查环境时执行
auto-resolves-not-allowed = false
# 临时允许策略（即使系统禁止，也可以临时开启，非永久修改系统配置）
# 如果和 auto-resolves-not-allowed 同时开启，以本配置为准
auto-resolves-not-allowed-temporary = true
# 安全模式，禁止操作非工作目录下的文件，禁止对操作系统进行修改
safe-mode = true

# cmd 配置（包括bat）
[cmd]
# 如果为false，系统将忽略所有bat/cmd的脚本
enable = true
# 名称不能修改
name = "cmd"
# 允许以管理员权限运行（不安全）
# 会尝试请求root权限
admin = false
# 安全模式，禁止操作非工作目录下的文件，禁止对操作系统进行修改
safe-mode = true

[sql]
# SQL 服务器类型，可以从下面值中选择
# mysql/mssql/oracle
type = "mysql"
# SQL 服务器地址
addr = "127.0.0.1"
# SQL 服务器端口
port = 3306
# ssl
use-ssl = false
# 认证方法
# 可选 passwd（密码）/passkey（密钥）/none（无需认证）
auth-type = "passwd"
# SQL 服务器认证用户名
username = "root"
# SQL 服务器认证密码
password = "root"
# SQL 服务器认证密钥地址
passkey = "./mysql.key"
# 默认的数据库（如果未在SQL中指定）
database = "demo"
# 数据库测试命令
test-command = "select 1"
